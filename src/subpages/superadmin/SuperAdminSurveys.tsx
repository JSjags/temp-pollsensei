"use client";

import { useGetSuperAdminSurveyQuery } from "@/services/superadmin.service";
import React, { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { generateInitials } from "@/lib/utils";
import { formatDateOption } from "@/lib/helpers";
import PageControl from "@/components/common/PageControl";
import TableSkeleton from "@/components/common/TableSkeleton";
import { Button } from "@/components/ui/button";
import { Eye, Power } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

const SuperAdminSurveys = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedSurvey, setSelectedSurvey] = useState<any>(null);

  const { data, isLoading, error, isFetching, refetch } =
    useGetSuperAdminSurveyQuery("");
  const totalItems = data?.data?.total || 0;
  const totalPages = Math.ceil(totalItems / 20);

  const navigatePage = (direction: "next" | "prev") => {
    setCurrentPage((prevIndex) => {
      if (direction === "next") {
        return prevIndex < totalPages ? prevIndex + 1 : prevIndex;
      } else {
        return prevIndex > 1 ? prevIndex - 1 : prevIndex;
      }
    });
    refetch();
  };

  const statusColorMap = {
    pending: "text-yellow-600 bg-yellow-50",
    completed: "text-green-600 bg-green-50",
    in_progress: "text-blue-600 bg-blue-50",
    cancelled: "text-red-600 bg-red-50",
  };

  const getRandomColor = () => {
    const colors = [
      "#FFC107",
      "#3498DB",
      "#27AE60",
      "#2980B9",
      "#2ECC71",
      "#E74C3C",
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  };

  return (
    <div className="h-full w-full flex flex-col">
      <h1 className="text-xl font-bold mb-6">Created Survey Table</h1>
      <div className="flex-1 bg-white rounded-lg shadow">
        {(isLoading || isFetching) && <TableSkeleton />}
        {!isLoading && !isFetching && (
          <div className="h-full relative overflow-x-auto border-b">
            <table className="w-full table-fixed">
              <thead className="bg-white sticky top-0 z-10">
                <tr>
                  <th className="w-48 text-left py-3 px-4 font-medium text-sm">
                    Created by
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm">
                    Email
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm">
                    Topic
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm whitespace-nowrap">
                    Generated by
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm">
                    Type
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm whitespace-nowrap">
                    Responses
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm whitespace-nowrap">
                    Created Date
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-sm">
                    Status
                  </th>
                  <th className="w-20 text-left py-3 px-4 font-medium text-sm sticky right-0 bg-white">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody className="w-full">
                {error ? (
                  <tr>
                    <td colSpan={8} className="text-center py-4">
                      <span className="text-sm text-red-500">
                        Something went wrong
                      </span>
                    </td>
                  </tr>
                ) : data?.data?.data?.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="text-center py-4">
                      <span className="text-sm text-gray-500">
                        No record found
                      </span>
                    </td>
                  </tr>
                ) : (
                  data?.data?.data?.map((survey: any, index: number) => (
                    <tr
                      key={index}
                      className={`text-sm hover:bg-gray-50 transition-colors ${
                        index % 2 === 0 ? "bg-gray-50" : "bg-gray-100"
                      }`}
                    >
                      <td className="py-3 px-4">
                        <div className="flex items-center gap-2">
                          <Avatar className="h-8 w-8">
                            <AvatarImage src={survey?.photo_url ?? ""} />
                            <AvatarFallback
                              style={{ backgroundColor: getRandomColor() }}
                              className="text-white"
                            >
                              {generateInitials(survey?.creator.name ?? "")}
                            </AvatarFallback>
                          </Avatar>
                          <span className="line-clamp-1">
                            {survey?.creator.name}
                          </span>
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        <span className="line-clamp-1">
                          {survey?.creator.email}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        <span className="line-clamp-2">{survey?.topic}</span>
                      </td>
                      <td className="py-3 px-4">
                        <span className="line-clamp-1 capitalize">
                          {survey?.generated_by === "ai"
                            ? "AI"
                            : survey?.generated_by}
                        </span>
                      </td>
                      <td className="py-3 px-4 font-medium">
                        <span className="line-clamp-1">
                          {survey?.survey_type}
                        </span>
                      </td>
                      <td className="py-3 px-4 font-medium">
                        <span className="line-clamp-1">
                          {survey?.response_count}
                        </span>
                      </td>
                      <td className="py-3 px-4 whitespace-nowrap">
                        {survey?.createdAt
                          ? formatDateOption(survey.createdAt)
                          : "Not Available"}
                      </td>
                      <td className="py-3 px-4">
                        <span
                          className={`px-2 py-1 whitespace-nowrap rounded-full text-xs ${
                            survey?.status.toLowerCase() === "on going"
                              ? "text-green-600 bg-green-50"
                              : "text-red-600 bg-red-50"
                          }`}
                        >
                          {survey?.status}
                        </span>
                      </td>
                      <td className="py-3 px-4 sticky right-0 bg-inherit">
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSelectedSurvey(survey)}
                            className="hover:text-primary"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>

      <div className="mt-6 sm:mt-8 flex justify-between items-center">
        <p className="text-sm font-medium text-gray-700">
          {totalItems > 0
            ? `Showing ${(currentPage - 1) * 20 + 1}-${Math.min(
                currentPage * 20,
                totalItems
              )} of ${totalItems}`
            : "No items to display"}
        </p>
        <PageControl
          currentPage={currentPage}
          totalPages={totalPages}
          onNavigate={navigatePage}
        />
      </div>

      <Dialog
        open={!!selectedSurvey}
        onOpenChange={() => setSelectedSurvey(null)}
      >
        <DialogContent
          className="max-w-2xl z-[100000]"
          overlayClassName="z-[100000]"
        >
          <DialogHeader>
            <DialogTitle>Survey Details</DialogTitle>
          </DialogHeader>
          <div className="mt-4 space-y-4">
            {selectedSurvey && (
              <>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Created by
                    </h3>
                    <p className="mt-1 text-sm">
                      {selectedSurvey.creator.name}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">Email</h3>
                    <p className="mt-1 text-sm">
                      {selectedSurvey.creator.email}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">Topic</h3>
                    <p className="mt-1 text-sm">{selectedSurvey.topic}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Generated by
                    </h3>
                    <p className="mt-1 text-sm">
                      {selectedSurvey.generated_by}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Survey Type
                    </h3>
                    <p className="mt-1 text-sm">{selectedSurvey.survey_type}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Response Count
                    </h3>
                    <p className="mt-1 text-sm">
                      {selectedSurvey.response_count}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Status
                    </h3>
                    <p className="mt-1 text-sm">{selectedSurvey.status}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500">
                      Created Date
                    </h3>
                    <p className="mt-1 text-sm">
                      {formatDateOption(selectedSurvey.createdAt)}
                    </p>
                  </div>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SuperAdminSurveys;
